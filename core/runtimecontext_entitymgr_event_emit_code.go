// Code generated by eventcode --decl_file=runtimecontext_entitymgr_event.go --not_import_core gen_emit --package=core --default_export=0; DO NOT EDIT.

package core

func emitEventEntityMgrAddEntity(event IEvent, runtimeCtx RuntimeContext, entity Entity) {
	if event == nil {
		panic("nil event")
	}
	event.Emit(func(delegate IfaceCache) bool {
		Cache2Iface[EventEntityMgrAddEntity](delegate).OnEntityMgrAddEntity(runtimeCtx, entity)
		return true
	})
}

func emitEventEntityMgrRemoveEntity(event IEvent, runtimeCtx RuntimeContext, entity Entity) {
	if event == nil {
		panic("nil event")
	}
	event.Emit(func(delegate IfaceCache) bool {
		Cache2Iface[EventEntityMgrRemoveEntity](delegate).OnEntityMgrRemoveEntity(runtimeCtx, entity)
		return true
	})
}

func emitEventEntityMgrEntityAddComponents(event IEvent, runtimeCtx RuntimeContext, entity Entity, components []Component) {
	if event == nil {
		panic("nil event")
	}
	event.Emit(func(delegate IfaceCache) bool {
		Cache2Iface[EventEntityMgrEntityAddComponents](delegate).OnEntityMgrEntityAddComponents(runtimeCtx, entity, components)
		return true
	})
}

func emitEventEntityMgrEntityRemoveComponent(event IEvent, runtimeCtx RuntimeContext, entity Entity, component Component) {
	if event == nil {
		panic("nil event")
	}
	event.Emit(func(delegate IfaceCache) bool {
		Cache2Iface[EventEntityMgrEntityRemoveComponent](delegate).OnEntityMgrEntityRemoveComponent(runtimeCtx, entity, component)
		return true
	})
}

func emitEventEntityMgrNotifyECTreeRemoveEntity(event IEvent, runtimeCtx RuntimeContext, entity Entity) {
	if event == nil {
		panic("nil event")
	}
	event.Emit(func(delegate IfaceCache) bool {
		Cache2Iface[eventEntityMgrNotifyECTreeRemoveEntity](delegate).onEntityMgrNotifyECTreeRemoveEntity(runtimeCtx, entity)
		return true
	})
}
